# SPDX-FileCopyrightText: 2024 Helio Chissini de Castro <heliocastro@gmail.com>
#
# SPDX-License-Identifier: MIT

name: "Docker image"
description: "Check and create docker image if not exists"
author: "Helio Chissini de Castro <heliocastro@gmail.com>"

inputs:
  registry:
    description: "GitHub container registry"
    default: "ghcr.io"
  token:
    description: "GitHub token"
    required: true
  name:
    description: "Image name"
    required: true
  version:
    description: "Image version"
    required: true
  invalidate-cache:
    description: 'Build all images disregarding exists same version'
    required: false
  build-args:
    description: "List of build-time variables"
    required: false
  build-contexts:
    description: "Add extra context translation for the image"
    required: false
  secret-files:
    description: "Pass secrets as build info"
    required: false
  debug:
    description: "Debug check_image script"
    required: false

runs:
  using: "composite"

  steps:
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Check if Docker image tag exists
      id: check_image
      shell: bash
      env:
        INPUT_REGISTRY: ${{ inputs.registry }}
        INPUT_TOKEN: ${{ inputs.token }}
        INPUT_NAME: ${{ inputs.name }}
        INPUT_VERSION: ${{ inputs.version }}
        BUILD_ARGS: ${{ inputs.build-args }}
        INVALIDATE_CACHE: ${{ inputs.invalidate-cache }}
        ACTION_DEBUG: ${{ inputs.debug }}
      run: |
        pip install -q -U pip requests rich
        python ./.github/actions/docker_control/check_image.py

    - name: Set up Docker build
      if: steps.check_image.outputs.result != 'found'
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub container registry
      if: steps.check_image.outputs.result != 'found'
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ github.actor }}
        password: ${{ inputs.token }}

    - name: Extract components metadata (tags, labels)
      if: steps.check_image.outputs.result != 'found'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ github.repository }}/${{ inputs.name }}
        tags: |
          type=schedule,pattern={{date 'YYYYMMDD'}}
          type=schedule,pattern=snapshot
          type=raw,value=${{ inputs.version }}
          type=raw,value=${{ steps.check_image.outputs.result }}
          type=ref,event=tag

    - name: Build image
      if: >
        steps.check_image.outputs.result != 'found'
      uses: docker/build-push-action@v5
      with:
        context: .
        target: ${{ inputs.name }}
        push: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        load: false
        build-args: ${{ inputs.build-args }}
        tags: |
          ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-contexts: ${{ inputs.build-contexts }}
        secret-files: ${{ inputs.secret-files }}

